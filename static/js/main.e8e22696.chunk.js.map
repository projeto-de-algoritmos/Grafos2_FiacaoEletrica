{"version":3,"sources":["pages/home/styles.js","functions/fila_de_prioridades.js","functions/grafo.js","pages/home/index.js","routes.js","styles/global.js","App.js","index.js","asserts/torre.png"],"names":["Container","styled","div","Menu","darken","Text","p","Text0","Text2","Custo","Heap","this","fila_de_prioridades","estrutura_auxiliar","quantidade","elemento","novo_elemento","id","custo","Number","MAX_SAFE_INTEGER","origem","push","posicao","antes","depois","novo_custo","obter_posicao","filho","custo_filho","pai","Math","floor","custo_pai","atualizar_referencia","elemento_retirado","pop","length","N","console","log","Grafo","vertices","caminho","vertice","vizinhos","grau","destino","peso","tipo","nova_aresta","nova_aresta_invertida","arestas","de","para","toString","inicial","heap","vertices_explorados","total","inserir","atualizar_prioridades","u","remover_o_primeiro","vizinho","Dashboard","grafo","useState","exemploSelect","setExemploSelect","nodeSelect","setNodeSelect","setCusto","edge","setEdge","selectEdge","setSelectEdge","nodes","edges","graph","setgraph","useEffect","node","i","from","Aleatorio","tamanho","to","value","shape","image","logo","label","events","select","event","min","max","ceil","random","type","onClick","e","map","no","adcVertice","ed","adcAresta","parseInt","prim","getCaminho","Cami","getCusto","n","len","options","interaction","multiselect","hoverConnectedEdges","autoResize","height","width","borderWidth","size","color","border","background","highlight","font","arrows","enabled","Routes","path","exact","component","DashBoard","createGlobalStyle","App","basename","process","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e8e22696.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { darken } from 'polished';\nexport const Container = styled.div`\n  height: 100%;\n  background: linear-gradient(-90deg, #7159c1, #335bff);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nexport const Menu = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n  button {\n    margin: 5px 0 0;\n    height: 44px;\n    padding: 0 15px;\n    background: #3b9eff;\n    font-weight: bold;\n    color: #fff;\n    border: 0;\n    border-radius: 4px;\n    font-size: 16px;\n    transition: background 0.2s;\n\n    &:hover {\n      background: ${darken(0.03, '#3b9eff')};\n    }\n  }\n`;\nexport const Text = styled.p`\n  margin-bottom: 20px;\n  font-size: 16px;\n  color: #fff;\n  padding: 4px;\n  text-align: center;\n`;\nexport const Text0 = styled.p`\n  margin-bottom: 80px;\n  font-size: 30px;\n  color: #fff;\n  padding: 4px;\n  text-align: center;\n`;\n\n\nexport const Text2 = styled.p`\n  margin-top: 10px;\n  font-size: 30px;\n  color: #fff;\n  padding: 4px;\n  text-align: center;\n`;\nexport const Custo = styled.p`\n  margin-top: 10px;\n  font-size: 50px;\n  color: #fff;\n  padding: 4px;\n  text-align: center;\n`;\n","export default class Heap {\n  constructor() {\n    this.fila_de_prioridades = []; // estrutura onde é armazenado de fato o array de prioridades\n    this.estrutura_auxiliar = {}; // estrutura auxiliar que armazena a posição de um elemento no array de prioridades, para fazer buscas em O(1)\n    this.quantidade = 0;\n  }\n\n  inserir(elemento) {\n    // função para inserir elemento no heap\n    let novo_elemento = {\n      id: elemento, // identificação do vértice\n      custo: Number.MAX_SAFE_INTEGER, // custo iniciando em \"infinito\",\n      origem: '', // guardará o vertice pai desse elemento no heap, para ajudar na construção da arvore geradora mínima.\n    };\n\n    this.fila_de_prioridades.push(novo_elemento);\n\n    this.estrutura_auxiliar[elemento] = {\n      // armazenando a posição de onde o elemento foi adicionado no array\n      posicao: this.quantidade,\n    };\n    this.quantidade++;\n\n    return novo_elemento;\n  }\n\n  // metodo que retorna a posicao de um elemento no array em O(1).\n  obter_posicao(elemento) {\n    return this.estrutura_auxiliar[elemento]['posicao'];\n  }\n  // funcao para alterar a referencia para os elementos no array\n  atualizar_referencia(antes, depois) {\n    this.estrutura_auxiliar[this.fila_de_prioridades[antes]['id']][\n      'posicao'\n    ] = depois;\n  }\n\n  atualizar_prioridades(elemento, novo_custo, origem) {\n    this.fila_de_prioridades[this.obter_posicao(elemento)]['origem'] = origem; // salvando de onde vem a aresta para este vértice, com o menor custo.\n\n    if (elemento == this.fila_de_prioridades[0]['id']) {\n      // se o elemento a ser atualizado for igual ao elemento head do heap,\n      if (novo_custo < this.fila_de_prioridades[0]['custo']) {\n        // é verificado qual custa menos\n        this.fila_de_prioridades[0]['custo'] = novo_custo; // se o novo custo for menor que o custo atual (do head) é feita a troca escolhendo o de menor custo.\n      }\n      return;\n    }\n\n    // abaixo começa o processo de subir no heap\n\n    let filho = this.obter_posicao(elemento); // filho recebe o indice do vetor atrelado ao elemento\n    let custo_filho = novo_custo;\n    let pai = Math.floor((filho - 1) / 2); // para descobrir o pai de um vértice do heap, informação que será usada em caso de swap.\n    let custo_pai = this.fila_de_prioridades[pai]['custo'];\n\n    this.fila_de_prioridades[filho]['custo'] = novo_custo; // atrelando ao vertice o seu novo custo ja que é garantido que ele é menor que o atual.\n\n    // O(log n) enquanto filho nao for o head, e o seu pai for mais custoso, ele sobe no heap.\n    while (filho > 0 && custo_filho <= custo_pai) {\n      // como haverá alteracao no array é necessario atualizar as referencias (\"ponteiros\") para manter a coesao.\n      this.atualizar_referencia(filho, pai); // a posiçãoo do filho recebe a posicao do pai ...\n      this.atualizar_referencia(pai, filho); // ... e vice versa.\n      [this.fila_de_prioridades[pai], this.fila_de_prioridades[filho]] = [\n        this.fila_de_prioridades[filho],\n        this.fila_de_prioridades[pai],\n      ]; // troca de posicao no array entre pai e filho.\n\n      filho = pai; // atribuições para continuar  o processo de subida\n      pai = Math.floor((pai - 1) / 2);\n\n      if (filho == 0)\n        // se o filho for 0 é porque chegou no head do heap.\n        break;\n\n      custo_pai = this.fila_de_prioridades[pai]['custo']; // atualizando custo do novo pai\n      custo_filho = this.fila_de_prioridades[filho]['custo']; // atualizando custo do novo filho\n    }\n  }\n  // complexidade O(log n)\n  remover_o_primeiro() {\n    delete this.estrutura_auxiliar[this.fila_de_prioridades[0]['id']]; // retirando da estrutura auxiliar onde era guardada sua posição.\n    let elemento_retirado = this.fila_de_prioridades[0]['id']; // salvando o elemento a ser retirado na variavel elemento_retirado\n    let elemento = this.fila_de_prioridades.pop(); // retirando o ultimo elemento do array\n    this.quantidade--;\n\n    if (this.fila_de_prioridades.length === 0) {\n      // se apos a retirada nao houverem elementos retorna o elemento retirado\n      return elemento_retirado;\n    }\n\n    // processo de trazer o ultimo elemento do array para o head (primeiro elemento do array)\n    this.fila_de_prioridades[0]['id'] = elemento['id'];\n    this.fila_de_prioridades[0]['custo'] = elemento['custo'];\n    this.estrutura_auxiliar[elemento['id']]['posicao'] = 0; // atualizando a referencia\n    //\n\n    // abaixo começa o processo de descer no heap até achar sua posicao\n    let pai = 0;\n    let filho = pai * 2 + 1; // selecionando o filho mais à esquerda\n\n    let N = this.fila_de_prioridades.length;\n\n    while (filho < N) {\n      if (filho < N - 1) {\n        // verificar se o vertice tem um irmão\n        // se sim compara os custos dos dois e seleciona o de menor\n        if (\n          this.fila_de_prioridades[pai * 2 + 1]['custo'] >\n          this.fila_de_prioridades[pai * 2 + 2]['custo']\n        ) {\n          // como o padrao ja ta o filho da esquerda se o filho da direita tiver um custo menor, é so dar um ++.\n          filho++;\n        }\n      }\n\n      if (\n        this.fila_de_prioridades[pai]['custo'] <\n        this.fila_de_prioridades[filho]['custo']\n      )\n        break;\n\n      this.atualizar_referencia(filho, pai); // a posiçãoo do filho recebe a posicao do pai ...\n      this.atualizar_referencia(pai, filho); // ... e vice versa.\n      [this.fila_de_prioridades[pai], this.fila_de_prioridades[filho]] = [\n        this.fila_de_prioridades[filho],\n        this.fila_de_prioridades[pai],\n      ]; // swap\n\n      pai = filho;\n\n      filho = pai * 2 + 1;\n    }\n\n    return elemento_retirado;\n  }\n\n  imprimir() {\n    console.log(this.fila_de_prioridades);\n  }\n}\n","import Heap from './fila_de_prioridades';\nexport default class Grafo {\n  constructor() {\n    this.vertices = {};\n    this.custo = 0;\n    this.caminho = {};\n  }\n\n  // adição de um vertice 'id' no grafo\n  adcVertice(id) {\n    let vertice = {\n      id: id,\n      vizinhos: [],\n      grau: 0,\n    };\n\n    this.vertices[id] = vertice;\n  }\n\n  // adicionar aresta aos vertices * parametro 'tipo' opcional (se nao for passado ele considera uma aresta orientada (a->c))\n  // se for passado o valor 'nao_orientado' em 'tipo', ele alem de fazer a aresta (a->c) ele faz a aresta (c->a)\n  adcAresta(origem, destino, peso, tipo) {\n    if (\n      typeof tipo === 'undefined' ||\n      tipo === 'orientado' ||\n      tipo === 'nao_orientado'\n    ) {\n      let nova_aresta = {\n        origem: origem,\n        destino: destino,\n        peso: peso,\n      };\n      this.vertices[origem]['vizinhos'].push(nova_aresta);\n      this.vertices[origem]['grau']++;\n    }\n    if (tipo === 'nao_orientado') {\n      let nova_aresta_invertida = {\n        origem: destino,\n        destino: origem,\n        peso: peso,\n      };\n\n      this.vertices[destino]['vizinhos'].push(nova_aresta_invertida);\n      this.vertices[destino]['grau']++;\n    }\n  }\n\n  obterVertices() {\n    return this.vertices; // retornando todos os nós do grafo\n  }\n\n  obterArestas() {\n    let arestas = [];\n\n    for (let vertice in this.vertices) {\n      for (let aresta of this.vertices[vertice]['vizinhos']) {\n        let nova_aresta = {\n          de: vertice,\n          para: aresta.toString(),\n        };\n        arestas.push(nova_aresta);\n      }\n    }\n\n    return arestas;\n  }\n\n  // tentar implementar a versao otima do algoritmo de prim\n\n  prim(inicial) {\n    const heap = new Heap();\n    let vertices_explorados = {};\n    let arestas = [];\n    let total = 0;\n\n    // adicionando todos os vertices a fila de prioridades (heap)\n    // custo O(n)\n    for (let vertice in this.vertices) {\n      heap.inserir(vertice);\n    }\n    //\n    //função 'atualizar_prioridades' da classe heap leva o elemento (se for o de menor valor) ao topo do heap\n    heap.atualizar_prioridades(inicial, 0); // operação de custo (O log N)\n    //\n    // remove o elemento de indice 0 da fila de prioridades ou head do heap.\n    let u = heap.remover_o_primeiro(); // operacao de custo O(log N)\n\n    while (heap.fila_de_prioridades.length !== 0) {\n      vertices_explorados[u] = u; // adiciona o primeiro elemento que foi removido aos vertices já explorados (CUT)\n\n      for (let vizinho of this.vertices[u]['vizinhos']) {\n        // para cada vizinho de u\n        // o if abaixo verifica se o vizinho de u em questao esta fora do cut (vertices visitados)\n        // verifica tambem se o custo do vizinho atual é menor do que o custo que esta atrelado a ele na fila de prioridades\n        if (\n          typeof vertices_explorados[vizinho['destino']] === 'undefined' &&\n          vizinho['peso'] <\n            heap.fila_de_prioridades[\n              heap.estrutura_auxiliar[vizinho['destino']]['posicao']\n            ]['custo']\n        ) {\n          // se as condicoes acima forem verdade entao atualiza a posição desse vizinho na fila de prioridades (heap)\n          heap.atualizar_prioridades(vizinho['destino'], vizinho['peso'], u); // operação de custo O(log N)\n          // o parametro U passado na função acima, salva o elemento de onde aquele nó partiu.\n        }\n      }\n      // após visitar cada vizinho de u, o algoritmo irá adicionar uma nova aresta à árvore geradora.\n\n      let nova_aresta = {\n        origem: heap.fila_de_prioridades[0]['origem'],\n        destino: heap.fila_de_prioridades[0]['id'],\n        custo: heap.fila_de_prioridades[0]['custo'],\n      };\n\n      arestas.push(nova_aresta); // adicionando a aresta a estrutura que armazena as arestas\n      total += heap.fila_de_prioridades[0]['custo']; // adicionando o custo daquela aresta ao custo total da arvore geradora\n      u = heap.remover_o_primeiro(); // setar o novo u;\n    }\n    this.custo = total;\n    this.caminho = arestas;\n    console.log(arestas);\n    console.log(total);\n  }\n  getCaminho() {\n    return this.caminho;\n  }\n  getCusto() {\n    return this.custo;\n  }\n  imprimir() {\n    console.log(this.vertices);\n  }\n}\n\n// const graph = new Grafo();\n\n// // dados abaixo vindos do slide do professor\n\n// var a = 'A';\n// var b = 'B';\n// var c = 'C';\n// var d = 'D';\n// var e = 'E';\n// var f = 'F';\n// var g = 'G';\n// var h = 'H';\n\n// graph.adcVertice(a);\n// graph.adcVertice(b);\n// graph.adcVertice(c);\n// graph.adcVertice(d);\n// graph.adcVertice(e);\n// graph.adcVertice(f);\n// graph.adcVertice(g);\n// graph.adcVertice(h);\n\n// // exemplo de grafo 1 da videoaula do professor\n// graph.adcAresta('A', 'B', 4, 'nao_orientado');\n// graph.adcAresta('A', 'C', 6, 'nao_orientado');\n// graph.adcAresta('A', 'D', 16, 'nao_orientado');\n// graph.adcAresta('B', 'G', 24, 'nao_orientado');\n// graph.adcAresta('C', 'E', 5, 'nao_orientado');\n// graph.adcAresta('C', 'D', 8, 'nao_orientado');\n// graph.adcAresta('C', 'G', 23, 'nao_orientado');\n// graph.adcAresta('D', 'E', 10, 'nao_orientado');\n// graph.adcAresta('D', 'H', 21, 'nao_orientado');\n// graph.adcAresta('E', 'G', 18, 'nao_orientado');\n// graph.adcAresta('E', 'F', 11, 'nao_orientado');\n// graph.adcAresta('E', 'H', 14, 'nao_orientado');\n// graph.adcAresta('F', 'G', 9, 'nao_orientado');\n// graph.adcAresta('F', 'H', 7, 'nao_orientado');\n// // exemplo de grafo 2 da videoaula do professor\n// // graph.adcAresta('A', 'B', 2, 'nao_orientado');\n// // graph.adcAresta('A', 'C', 3, 'nao_orientado');\n// // graph.adcAresta('B', 'C', 5, 'nao_orientado');\n// // graph.adcAresta('B', 'D', 4, 'nao_orientado');\n// // graph.adcAresta('B', 'E', 4, 'nao_orientado');\n// // graph.adcAresta('C', 'E', 5, 'nao_orientado');\n// // graph.adcAresta('D', 'E', 2, 'nao_orientado');\n// // graph.adcAresta('D', 'F', 3, 'nao_orientado');\n// // graph.adcAresta('E', 'F', 5, 'nao_orientado');\n// graph.prim('E')\n","import React, { useState, useEffect } from 'react';\nimport Graph from 'react-graph-vis';\nimport { Container, Menu, Text, Text0, Text2, Custo } from './styles';\nimport logo from '../../asserts/torre.png';\nimport Grafo from '../../functions/grafo';\n\nfunction Dashboard() {\n  const grafo = new Grafo(); // instancia grafo\n  const [exemploSelect, setExemploSelect] = useState(false);\n  const [nodeSelect, setNodeSelect] = useState();\n  const [custo, setCusto] = useState(0);\n  const [edge, setEdge] = useState([]);\n  const [selectEdge, setSelectEdge] = useState([]);\n  const [graph, setgraph] = useState({\n    // inicializa os nós e arestas do grafo\n    nodes: [],\n    edges: [],\n  });\n\n  useEffect(() => {\n    // inicializa grafo de maneira aleatoria\n    var node = [];\n    var edge = [];\n    var tamanho = 20; // numero de nós\n    for (var i = 0; i < tamanho; i++) {\n      var from = Aleatorio(Aleatorio(1, tamanho - 1), tamanho - 1);\n      var to = Aleatorio(1, tamanho - 1);\n      var value = Aleatorio(1, 100);\n      node.push({\n        id: i,\n        shape: 'circularImage',\n        image: logo,\n        label: `Poste ${i}`,\n      });\n      edge.push({\n        from: from,\n        to: to,\n        label: `${value}`,\n        id: i,\n      });\n    }\n    //=========================\n    // salva grafo  aleatorio no state\n    setEdge(edge);\n    setgraph({\n      nodes: node,\n      edges: edge,\n    });\n    //==========================\n  }, []);\n\n  const options = {\n    // define as opçoes para renderizaçao do grafo\n    interaction: { multiselect: true, hoverConnectedEdges: true },\n    autoResize: true,\n    height: '100%',\n    width: '100%',\n    nodes: {\n      borderWidth: 3,\n      size: 10,\n      color: {\n        border: '#222222',\n        background: '#ffff',\n        highlight: {\n          border: '#000080',\n          background: '#4682B4',\n        },\n      },\n      font: { color: '#2f2f2f' },\n    },\n    edges: {\n      color: 'lightgray',\n      arrows: {\n        to: {\n          enabled: false,\n        },\n        from: {\n          enabled: false,\n        },\n      },\n    },\n  };\n  const events = {\n    // função que captura os nós selecionados pelo usuario\n    select: function (event) {\n      var { nodes, edges } = event;\n      //=======================\n      // adiciona os nos e arestas selecionados no state\n      setNodeSelect(nodes);\n      setSelectEdge(edges);\n      //======================\n    },\n  };\n\n  function Aleatorio(min, max) {\n    // gera valores aleatorios\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  // funçao que envia dados para o algoritmo de Prim e exibe os erutados em tela\n  function CreateGraph() {\n    var n = [];\n    var e = [];\n    //  ===========================\n    // adiciona os nos para o Algoritmo de Prim\n    nodeSelect.map((no) => {\n      grafo.adcVertice(`${no}`);\n      n.push({\n        id: no,\n        shape: 'circularImage',\n        image: logo,\n        label: `Poste ${no}`,\n      });\n    });\n    //==============================\n\n    //==============================\n    // adiciona arestas para o Algoritmo de Prim\n    edge.map((ed) => {\n      var len = 0;\n      while (len < selectEdge.length) {\n        if (selectEdge[len] == ed['id']) {\n          // verifica dados  das arestas pelo ID\n          grafo.adcAresta(\n            // adiona no grafro\n            `${ed['from']}`,\n            `${ed['to']}`,\n            parseInt(ed['label'], 10),\n            'nao_orientado'\n          );\n        }\n        len++;\n      }\n      //=====================================\n    });\n\n    grafo.prim(`${nodeSelect[0]}`); // inicia o algoritmo de prim, dizendo qual deve ser o no inical\n    var caminho = grafo.getCaminho(); // retona a lista de arestas de menor custo.\n    /// ===============================\n    // renderiza um novo grafro\n    caminho.map((Cami) => {\n      e.push({\n        from: Cami['origem'],\n        to: Cami['destino'],\n        label: `${Cami['custo']}`,\n      });\n    });\n\n    setgraph({\n      nodes: n,\n      edges: e,\n    });\n    //=================================\n    setCusto(grafo.getCusto()); // retorna o custo de percorrer determinado caminho\n  }\n\n  //===============================================\n  // funcçoes que carega exemplo da aula\n  function Exemp1() {\n    setCusto(0);\n    setExemploSelect(true);\n    setEdge([\n      { from: 'A', to: 'B', label: '4', id: '1' },\n      { from: 'A', to: 'C', label: '6', id: '2' },\n      { from: 'A', to: 'D', label: '16', id: '3' },\n      { from: 'B', to: 'G', label: '24', id: '4' },\n      { from: 'C', to: 'E', label: '5', id: '5' },\n      { from: 'C', to: 'D', label: '8', id: '6' },\n      { from: 'C', to: 'G', label: '23', id: '7' },\n      { from: 'D', to: 'E', label: '10', id: '8' },\n      { from: 'D', to: 'H', label: '21', id: '9' },\n      { from: 'E', to: 'G', label: '18', id: '10' },\n      { from: 'E', to: 'F', label: '11', id: '11' },\n      { from: 'E', to: 'H', label: '14', id: '12' },\n      { from: 'F', to: 'G', label: '9', id: '13' },\n      { from: 'F', to: 'H', label: '7', id: '14' },\n    ]);\n\n    setgraph({\n      nodes: [\n        { id: 'A', label: 'Poste A', shape: 'circularImage', image: logo },\n        { id: 'B', label: 'Poste B', shape: 'circularImage', image: logo },\n        { id: 'C', label: 'Poste C', shape: 'circularImage', image: logo },\n        { id: 'D', label: 'Poste D', shape: 'circularImage', image: logo },\n        { id: 'E', label: 'Poste E', shape: 'circularImage', image: logo },\n        { id: 'F', label: 'Poste F', shape: 'circularImage', image: logo },\n        { id: 'G', label: 'Poste G', shape: 'circularImage', image: logo },\n        { id: 'H', label: 'Poste H', shape: 'circularImage', image: logo },\n      ],\n      edges: [\n        { from: 'A', to: 'B', label: '4', id: '1' },\n        { from: 'A', to: 'C', label: '6', id: '2' },\n        { from: 'A', to: 'D', label: '16', id: '3' },\n        { from: 'B', to: 'G', label: '24', id: '4' },\n        { from: 'C', to: 'E', label: '5', id: '5' },\n        { from: 'C', to: 'D', label: '8', id: '6' },\n        { from: 'C', to: 'G', label: '23', id: '7' },\n        { from: 'D', to: 'E', label: '10', id: '8' },\n        { from: 'D', to: 'H', label: '21', id: '9' },\n        { from: 'E', to: 'G', label: '18', id: '10' },\n        { from: 'E', to: 'F', label: '11', id: '11' },\n        { from: 'E', to: 'H', label: '14', id: '12' },\n        { from: 'F', to: 'G', label: '9', id: '13' },\n        { from: 'F', to: 'H', label: '7', id: '14' },\n      ],\n    });\n  }\n  // =======================================================\n  //Exemplo 2\n  function Exemp2() {\n    setCusto(0);\n    setExemploSelect(true);\n    setEdge([\n      { from: 'A', to: 'B', label: '2', id: '1' },\n      { from: 'A', to: 'C', label: '3', id: '2' },\n      { from: 'B', to: 'C', label: '5', id: '3' },\n      { from: 'B', to: 'D', label: '4', id: '4' },\n      { from: 'B', to: 'E', label: '4', id: '5' },\n      { from: 'C', to: 'E', label: '5', id: '6' },\n      { from: 'D', to: 'E', label: '2', id: '7' },\n      { from: 'D', to: 'F', label: '3', id: '8' },\n      { from: 'E', to: 'F', label: '5', id: '9' },\n    ]);\n\n    setgraph({\n      nodes: [\n        { id: 'A', label: 'Poste A', shape: 'circularImage', image: logo },\n        { id: 'B', label: 'Poste B', shape: 'circularImage', image: logo },\n        { id: 'C', label: 'Poste C', shape: 'circularImage', image: logo },\n        { id: 'D', label: 'Poste D', shape: 'circularImage', image: logo },\n        { id: 'E', label: 'Poste E', shape: 'circularImage', image: logo },\n        { id: 'F', label: 'Poste F', shape: 'circularImage', image: logo },\n      ],\n      edges: [\n        { from: 'A', to: 'B', label: '2', id: '1' },\n        { from: 'A', to: 'C', label: '3', id: '2' },\n        { from: 'B', to: 'C', label: '5', id: '3' },\n        { from: 'B', to: 'D', label: '4', id: '4' },\n        { from: 'B', to: 'E', label: '4', id: '5' },\n        { from: 'C', to: 'E', label: '5', id: '6' },\n        { from: 'D', to: 'E', label: '2', id: '7' },\n        { from: 'D', to: 'F', label: '3', id: '8' },\n        { from: 'E', to: 'F', label: '5', id: '9' },\n      ],\n    });\n  }\n\n  //====================================================\n  // funçao que seleciona todos os elementos do grafo\n  function selectAll() {\n    const nodes = graph['nodes'];\n    var e = [];\n    graph['nodes'].map((no) => {\n      grafo.adcVertice(`${no['id']}`);\n    });\n    graph['edges'].map((ed) => {\n      grafo.adcAresta(\n        // adiona no grafro\n        `${ed['from']}`,\n        `${ed['to']}`,\n        parseInt(ed['label'], 10),\n        'nao_orientado'\n      );\n    });\n\n    grafo.prim(`${graph['nodes'][0]['id']}`); // inicia o algoritmo de prim, dizendo qual deve ser o no inical\n    var caminho = grafo.getCaminho(); // retona a lista de arestas de menor custo.\n    /// ===============================\n    // renderiza um novo grafro\n    caminho.map((Cami) => {\n      e.push({\n        from: Cami['origem'],\n        to: Cami['destino'],\n        label: `${Cami['custo']}`,\n      });\n    });\n    setgraph({\n      nodes: nodes,\n      edges: e,\n    });\n    //=================================\n    setCusto(grafo.getCusto()); // retorna o custo de percorrer determinado caminho\n  }\n\n  return (\n    <Container>\n      <Menu>\n        <Text0>\n          Cálculo de menor quantidade de quilômetros de fio\n        </Text0>\n        <Text>\n          Selecione os nós que deseja incluir no caminho, usando Ctrl+click\n        </Text>\n\n        <button type=\"submit\" onClick={Exemp1}>\n          Exemplo de aula 1{' '}\n        </button>\n        <button type=\"submit\" onClick={Exemp2}>\n          Exemplo de aula 2\n        </button>\n        {exemploSelect ? (\n          <button type=\"submit\" onClick={selectAll}>\n            Selecionar todos e gerar árvore geradora minima\n          </button>\n        ) : (\n          ''\n        )}\n        <button type=\"submit\" onClick={CreateGraph}>\n          Gerar árvore geradora mínima\n        </button>\n\n        <Text2>\n          {`Menor quilometragem de fio possível:`}\n        </Text2>\n        <Custo>\n          {`\"${custo}\" km`}\n        </Custo>\n      </Menu>\n      <Graph graph={graph} options={options} events={events} />\n    </Container>\n  );\n}\nexport default Dashboard;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport DashBoard from \"./pages/home\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={DashBoard} />\n    </Switch>\n  );\n}\n","import { createGlobalStyle } from 'styled-components';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\n\nexport default createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');\n*{\n  margin:0;\n  padding:0;\n  outline:0;\n  box-sizing:border-box;\n}\n*:focus{\n  outline:0;\n}\n\nhtml ,body, #root{\n  height:100%;\n}\nbody{\n  -webkit-font-smoothing:antialiased;\n\n}\nbody, -moz-user-input, button{\n  font :14px 'Roboto',sans-serif;\n}\na{\n  text-decoration:none;\n}\nul{list-style:none;}\nbutton{\n  cursor:pointer;\n}\n`;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Routes from './routes';\n\nimport GlobalStyle from './styles/global';\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes />\n      <GlobalStyle />\n    </BrowserRouter>\n  );\n}\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nrender(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/torre.bbc62c83.png\";"],"sourceRoot":""}